// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@use "var" as *;
@use "color" as *;
@use "easing" as *;
@use "sass:string";
@use "sass:map";
@use "sass:math";
@use "sass:meta";

@function strip-unit($number) {
  @if meta.type-of($number) == 'number' and not math.is-unitless($number) {
    @return math.div($number , 1);
  }

  @return $number;
}


// px→vw
@function vw($px, $base: $sp) {
  $value: $px;

  // 単位がpx以外の場合は警告を出してそのまま返す
  @if (math.unit($px) != 'px') {
    @warn 'vw()の引数にpx以外の値を指定しても計算できません';
    @return $value;
  }

  $value: calc(strip-unit($px) / strip-unit($base)) * 100vw;

  @return $value;
}


// min-vw()
@function min-vw($size, $vp: $sp) {
  $val_vw: vw($size,$vp);
  $val_vw_max: vw($size,$vp);

  @return min(round($size), $val_vw);
}


// color
@function color($color, $tone: base) {
  @return map.get(map.get($palette, $color), $tone);
}

// easing
@function ease($easing) {
  @return map.get($easings, $easing);
}
